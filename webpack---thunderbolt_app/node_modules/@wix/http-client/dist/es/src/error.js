import {
    requestIdOrEmptyString
} from './headers';
export const axiosErrorFields = [
    'code',
    'config',
    'request',
    'response',
    'toJSON',
    '__CANCEL__',
];
export class HttpError extends Error {
    constructor(error) {
        super(error.message);
        this.isWixHttpError = true;
        Object.setPrototypeOf(this, HttpError.prototype);
        axiosErrorFields.forEach((key) => {
            // index is type checked, but converting into 'any' as suggested in Typescript issues.
            this[key] = error[key];
        });
        this.maybeAddRequestIdToMessage(error);
    }
    maybeAddRequestIdToMessage(error) {
        const requestId = requestIdOrEmptyString(error.response);
        if ((error === null || error === void 0 ? void 0 : error.isWixHttpError) || !requestId) {
            return;
        }
        this.message = `${this.message}${`, requestId: ${requestId}`}`;
    }
    get requestId() {
        return requestIdOrEmptyString(this.response);
    }
}
export function createHttpError(...args) {
    return new HttpError(...args);
}
//# sourceMappingURL=error.js.map