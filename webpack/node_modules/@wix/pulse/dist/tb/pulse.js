var rt = Object.defineProperty;
var ot = (n, t, a) => t in n ? rt(n, t, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: a
}) : n[t] = a;
var v = (n, t, a) => (ot(n, typeof t != "symbol" ? t + "" : t, a), a);
var Q, E = function() {
        return window.performance && performance.getEntriesByType && performance.getEntriesByType("navigation")[0];
    },
    C = function(n) {
        if (document.readyState === "loading")
            return "loading";
        var t = E();
        if (t) {
            if (n < t.domInteractive)
                return "loading";
            if (t.domContentLoadedEventStart === 0 || n < t.domContentLoadedEventStart)
                return "dom-interactive";
            if (t.domComplete === 0 || n < t.domComplete)
                return "dom-content-loaded";
        }
        return "complete";
    },
    st = function(n) {
        var t = n.nodeName;
        return n.nodeType === 1 ? t.toLowerCase() : t.toUpperCase().replace(/^#/, "");
    },
    O = function(n, t) {
        var a = "";
        try {
            for (; n && n.nodeType !== 9;) {
                var e = n,
                    i = e.id ? "#" + e.id : st(e) + (e.classList && e.classList.value && e.classList.value.trim() && e.classList.value.trim().length ? "." + e.classList.value.trim().replace(/\s+/g, ".") : "");
                if (a.length + i.length > (t || 100) - 1)
                    return a || i;
                if (a = a ? i + ">" + a : i, e.id)
                    break;
                n = e.parentNode;
            }
        } catch {}
        return a;
    },
    K = -1,
    X = function() {
        return K;
    },
    L = function(n) {
        addEventListener("pageshow", function(t) {
            t.persisted && (K = t.timeStamp, n(t));
        }, !0);
    },
    A = function() {
        var n = E();
        return n && n.activationStart || 0;
    },
    T = function(n, t, a, e) {
        var i = E(),
            r = "navigate";
        return a ? r = a : X() >= 0 ? r = "back-forward-cache" : i && (document.prerendering || A() > 0 ? r = "prerender" : document.wasDiscarded ? r = "restore" : i.type && (r = i.type.replace(/_/g, "-"))), {
            name: n,
            value: t === void 0 ? -1 : t,
            rating: "good",
            delta: 0,
            entries: [],
            id: "v3-".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12),
            navigationType: r,
            navigationId: e || 1
        };
    },
    b = function(n) {
        return PerformanceObserver.supportedEntryTypes.includes("soft-navigation") && (n == null ? void 0 : n.reportSoftNavs);
    },
    R = function(n) {
        return n && n !== 1 ? window.performance && performance.getEntriesByType && performance.getEntriesByType("soft-navigation")[n - 2] : window.performance && performance.getEntriesByType && performance.getEntriesByType("navigation")[0];
    },
    S = function(n, t, a) {
        var e = b(a);
        try {
            if (PerformanceObserver.supportedEntryTypes.includes(n)) {
                var i = new PerformanceObserver(function(r) {
                    Promise.resolve().then(function() {
                        t(r.getEntries());
                    });
                });
                return i.observe(Object.assign({
                    type: n,
                    buffered: !0,
                    includeSoftNavigationObservations: e
                }, a || {})), i;
            }
        } catch {}
    },
    y = function(n, t, a, e) {
        var i, r;
        return function(s) {
            t.value >= 0 && (s || e) && ((r = t.value - (i || 0)) || i === void 0) && (i = t.value, t.delta = r, t.rating = function(u, o) {
                return u > o[1] ? "poor" : u > o[0] ? "needs-improvement" : "good";
            }(t.value, a), n(t));
        };
    },
    P = function(n) {
        requestAnimationFrame(function() {
            return requestAnimationFrame(function() {
                return n();
            });
        });
    },
    z = function(n) {
        var t = function(a) {
            a.type !== "pagehide" && document.visibilityState !== "hidden" || n(a);
        };
        addEventListener("visibilitychange", t, !0), addEventListener("pagehide", t, !0);
    },
    _ = -1,
    j = function() {
        return document.visibilityState !== "hidden" || document.prerendering ? 1 / 0 : 0;
    },
    F = function(n) {
        document.visibilityState === "hidden" && _ > -1 && (_ = n.type === "visibilitychange" ? n.timeStamp : 0, ut());
    },
    U = function() {
        addEventListener("visibilitychange", F, !0), addEventListener("prerenderingchange", F, !0);
    },
    ut = function() {
        removeEventListener("visibilitychange", F, !0), removeEventListener("prerenderingchange", F, !0);
    },
    Y = function() {
        return _ < 0 && (_ = j(), U(), L(function() {
            setTimeout(function() {
                _ = j(), U();
            }, 0);
        })), {
            get firstHiddenTime() {
                return _;
            }
        };
    },
    N = function(n) {
        document.prerendering ? addEventListener("prerenderingchange", function() {
            return n();
        }, !0) : n();
    },
    x = [1800, 3e3],
    tt = function(n, t) {
        var a = b(t = t || {});
        N(function() {
            var e, i = Y(),
                r = T("FCP"),
                s = S("paint", function(u) {
                    u.forEach(function(o) {
                        if (o.name === "first-contentful-paint") {
                            a ? (o.navigationId || 1) > 1 && (p = "soft-navigation", f = o.navigationId, r = T("FCP", 0, p, f), e = y(n, r, x, t.reportAllChanges)) : s.disconnect();
                            var d = 0;
                            if (o.navigationId && o.navigationId !== 1) {
                                var l = R(o.navigationId),
                                    c = (l == null ? void 0 : l.startTime) || 0;
                                d = Math.max(o.startTime - c, 0);
                            } else
                                d = Math.max(o.startTime - A(), 0);
                            (o.startTime < i.firstHiddenTime || o.navigationId && o.navigationId > 1) && (r.value = d, r.entries.push(o), r.navigationId = o.navigationId || 1, e(!0));
                        }
                        var p, f;
                    });
                }, t);
            s && (e = y(n, r, x, t.reportAllChanges), L(function(u) {
                r = T("FCP", 0, "back-forward-cache", r.navigationId), e = y(n, r, x, t.reportAllChanges), P(function() {
                    r.value = performance.now() - u.timeStamp, e(!0);
                });
            }));
        });
    },
    q = [0.1, 0.25],
    ct = function(n, t) {
        (function(a, e) {
            var i, r, s = b(e = e || {}),
                u = !1;
            tt((i = function() {
                var o, d = T("CLS", 0),
                    l = 0,
                    c = [],
                    p = function(m, h) {
                        d = T("CLS", 0, m, h), o = y(a, d, q, e.reportAllChanges), l = 0, u = !1;
                    },
                    f = function(m) {
                        m.forEach(function(h) {
                            if (s && h.navigationId && h.navigationId > d.navigationId && (l > d.value && (d.value = l, d.entries = c), o(!0), p("soft-navigation", h.navigationId)), !h.hadRecentInput) {
                                var V = c[0],
                                    at = c[c.length - 1];
                                l && h.startTime - at.startTime < 1e3 && h.startTime - V.startTime < 5e3 ? (l += h.value, c.push(h)) : (l = h.value, c = [h]);
                            }
                        }), l > d.value && (d.value = l, d.entries = c, o());
                    },
                    g = S("layout-shift", f, e);
                g && (o = y(a, d, q, e.reportAllChanges), z(function() {
                    f(g.takeRecords()), o(!0), u = !0;
                }), L(function() {
                    p("back-forward-cache", d.navigationId), P(function() {
                        return o();
                    });
                }), s && S("soft-navigation", function(m) {
                    m.forEach(function(h) {
                        h.navigationId && h.navigationId > d.navigationId && (u || o(!0), p("soft-navigation", h.navigationId), o = y(a, d, q, e.reportAllChanges));
                    });
                }, e), setTimeout(o, 0));
            }, r = !1, function(o) {
                r || (i(o), r = !0);
            }));
        })(function(a) {
            (function(e) {
                if (e.entries.length) {
                    var i = e.entries.reduce(function(u, o) {
                        return u && u.value > o.value ? u : o;
                    });
                    if (i && i.sources && i.sources.length) {
                        var r = (s = i.sources).find(function(u) {
                            return u.node && u.node.nodeType === 1;
                        }) || s[0];
                        if (r)
                            return void(e.attribution = {
                                largestShiftTarget: O(r.node),
                                largestShiftTime: i.startTime,
                                largestShiftValue: i.value,
                                largestShiftSource: r,
                                largestShiftEntry: i,
                                loadState: C(i.startTime)
                            });
                    }
                }
                var s;
                e.attribution = {};
            })(a), n(a);
        }, t);
    },
    dt = function(n, t) {
        tt(function(a) {
            (function(e) {
                if (e.entries.length) {
                    var i, r = e.entries[e.entries.length - 1],
                        s = 0,
                        u = 0;
                    if (e.navigationId && e.navigationId !== 1 ? i = R(e.navigationId) : (i = E()) && (s = i.activationStart || 0, u = Math.max(0, i.responseStart - s)), i)
                        return void(e.attribution = {
                            timeToFirstByte: u,
                            firstByteToFCP: e.value - u,
                            loadState: C(e.entries[0].startTime),
                            navigationEntry: i,
                            fcpEntry: r
                        });
                }
                e.attribution = {
                    timeToFirstByte: 0,
                    firstByteToFCP: e.value,
                    loadState: C(X())
                };
            })(a), n(a);
        }, t);
    },
    D = 0,
    w = 1 / 0,
    M = 0,
    J = 1,
    et = !1,
    lt = function(n) {
        n.forEach(function(t) {
            t.interactionId && (et && t.navigationId && t.navigationId > J && (J = t.navigationId, D = 0, w = 1 / 0, M = 0), w = Math.min(w, t.interactionId), M = Math.max(M, t.interactionId), D = M ? (M - w) / 7 + 1 : 0);
        });
    },
    nt = function() {
        return Q ? D : performance.interactionCount || 0;
    },
    gt = function(n) {
        "interactionCount" in performance || Q || (et = n || !1, Q = S("event", lt, {
            type: "event",
            buffered: !0,
            durationThreshold: 0,
            includeSoftNavigationObservations: n
        }));
    },
    B = [200, 500],
    it = 0,
    W = function() {
        return nt() - it;
    },
    I = [],
    k = {},
    Z = function(n) {
        var t = I[I.length - 1],
            a = k[n.interactionId];
        if (a || I.length < 10 || n.duration > t.latency) {
            if (a)
                a.entries.push(n), a.latency = Math.max(a.latency, n.duration);
            else {
                var e = {
                    id: n.interactionId,
                    latency: n.duration,
                    entries: [n]
                };
                k[e.id] = e, I.push(e);
            }
            I.sort(function(i, r) {
                return r.latency - i.latency;
            }), I.splice(10).forEach(function(i) {
                delete k[i.id];
            });
        }
    },
    ft = function(n, t) {
        var a = b(t = t || {}),
            e = !1;
        N(function() {
            gt(a);
            var i, r = T("INP"),
                s = function(l, c) {
                    I = [], it = l === "soft-navigation" ? 0 : nt(), r = T("INP", 0, l, c), i = y(n, r, B, t.reportAllChanges), e = !1;
                },
                u = function() {
                    var l, c, p = (c = Math.min(I.length - 1, Math.floor(W() / 50)), I[c]);
                    p && (p.latency !== r.value || (l = t) !== null && l !== void 0 && l.reportAllChanges) && (r.value = p.latency, r.entries = p.entries);
                },
                o = function(l) {
                    l.forEach(function(c) {
                        a && c.navigationId && c.navigationId > r.navigationId && (e || (u(), r.value > 0 && i(!0)), s("soft-navigation", c.navigationId)), c.interactionId && Z(c), c.entryType === "first-input" && !I.some(function(p) {
                            return p.entries.some(function(f) {
                                return c.duration === f.duration && c.startTime === f.startTime;
                            });
                        }) && Z(c);
                    }), u(), i();
                },
                d = S("event", o, {
                    durationThreshold: t.durationThreshold || 40,
                    opts: t
                });
            i = y(n, r, B, t.reportAllChanges), d && (d.observe({
                type: "first-input",
                buffered: !0,
                includeSoftNavigationObservations: a
            }), z(function() {
                o(d.takeRecords()), r.value < 0 && W() > 0 && (r.value = 0, r.entries = []), i(!0);
            }), L(function() {
                s("back-forward-cache", r.navigationId), P(function() {
                    return i();
                });
            }), a && S("soft-navigation", function(l) {
                l.forEach(function(c) {
                    c.navigationId && c.navigationId > r.navigationId && (!e && r.value > 0 && i(!0), s("soft-navigation", c.navigationId), i = y(n, r, B, t.reportAllChanges));
                });
            }, t));
        });
    },
    vt = function(n, t) {
        ft(function(a) {
            (function(e) {
                if (e.entries.length) {
                    var i = e.entries.sort(function(r, s) {
                        return s.duration - r.duration || s.processingEnd - s.processingStart - (r.processingEnd - r.processingStart);
                    })[0];
                    e.attribution = {
                        eventTarget: O(i.target),
                        eventType: i.name,
                        eventTime: i.startTime,
                        eventEntry: i,
                        loadState: C(i.startTime)
                    };
                } else
                    e.attribution = {};
            })(a), n(a);
        }, t);
    },
    G = [2500, 4e3],
    pt = function(n, t) {
        (function(a, e) {
            var i = !1,
                r = b(e = e || {});
            N(function() {
                var s, u = Y(),
                    o = T("LCP"),
                    d = function(f, g) {
                        o = T("LCP", 0, f, g), s = y(a, o, G, e.reportAllChanges), i = !1;
                    },
                    l = function(f) {
                        f.forEach(function(g) {
                            if (g) {
                                g.navigationId && g.navigationId > o.navigationId && (i || s(!0), d("soft-navigation", g.navigationId));
                                var m, h = 0;
                                h = g.navigationId !== 1 && g.navigationId ? Math.max(g.startTime - (((m = R(g.navigationId)) === null || m === void 0 ? void 0 : m.startTime) || 0), 0) : Math.max(g.startTime - A(), 0), g.startTime < u.firstHiddenTime && (o.value = h, o.entries = [g], o.navigationId = g.navigationId || 1, s());
                            }
                        });
                    },
                    c = function() {
                        i || (l(p.takeRecords()), r || p.disconnect(), i = !0, s(!0));
                    },
                    p = S("largest-contentful-paint", l, e);
                p && (s = y(a, o, G, e.reportAllChanges), ["keydown", "click"].forEach(function(f) {
                    addEventListener(f, c, !0);
                }), z(c), L(function(f) {
                    d("back-forward-cache", o.navigationId), P(function() {
                        o.value = performance.now() - f.timeStamp, i = !0, s(!0);
                    });
                }), r && S("soft-navigation", function(f) {
                    f.forEach(function(g) {
                        g.navigationId && g.navigationId > o.navigationId && (i || s(!0), d("soft-navigation", g.navigationId));
                    });
                }, e));
            });
        })(function(a) {
            (function(e) {
                if (e.entries.length) {
                    var i, r = 0,
                        s = 0;
                    if (e.navigationId && e.navigationId !== 1 ? i = R() : (i = E()) && (r = i.activationStart || 0, s = i.responseStart || 0), i) {
                        var u = e.entries[e.entries.length - 1],
                            o = u.url && performance.getEntriesByType("resource").filter(function(g) {
                                return g.name === u.url;
                            })[0],
                            d = Math.max(0, s - r),
                            l = Math.max(d, o ? (o.requestStart || o.startTime) - r : 0),
                            c = Math.max(l, o ? o.responseEnd - r : 0),
                            p = Math.max(c, u ? u.startTime - r : 0),
                            f = {
                                element: O(u.element),
                                timeToFirstByte: d,
                                resourceLoadDelay: l - d,
                                resourceLoadTime: c - l,
                                elementRenderDelay: p - c,
                                navigationEntry: i,
                                lcpEntry: u
                            };
                        return u.url && (f.url = u.url), o && (f.lcpResourceEntry = o), void(e.attribution = f);
                    }
                }
                e.attribution = {
                    timeToFirstByte: 0,
                    resourceLoadDelay: 0,
                    resourceLoadTime: 0,
                    elementRenderDelay: e.value
                };
            })(a), n(a);
        }, t);
    },
    $ = [800, 1800],
    ht = function n(t) {
        document.prerendering ? N(function() {
            return n(t);
        }) : document.readyState !== "complete" ? addEventListener("load", function() {
            return n(t);
        }, !0) : setTimeout(t, 0);
    },
    mt = function(n, t) {
        var a = b(t = t || {}),
            e = T("TTFB"),
            i = y(n, e, $, t.reportAllChanges);
        ht(function() {
            var r = E();
            if (r) {
                var s = r.responseStart;
                if (s <= 0 || s > performance.now())
                    return;
                e.value = Math.max(s - A(), 0), e.entries = [r], i(!0), L(function() {
                    e = T("TTFB", 0, "back-forward-cache", e.navigationId), (i = y(n, e, $, t.reportAllChanges))(!0);
                }), a && S("soft-navigation", function(u) {
                    u.forEach(function(o) {
                        o.navigationId && (e = T("TTFB", 0, "soft-navigation", o.navigationId), (i = y(n, e, $, t.reportAllChanges))(!0));
                    });
                }, t);
            }
        });
    },
    yt = function(n, t) {
        mt(function(a) {
            (function(e) {
                if (e.entries.length) {
                    var i = e.entries[0],
                        r = i.activationStart || 0,
                        s = Math.max(i.domainLookupStart - r, 0),
                        u = Math.max(i.connectStart - r, 0),
                        o = Math.max(i.requestStart - r, 0);
                    e.attribution = {
                        waitingTime: s,
                        dnsTime: u - s,
                        connectionTime: o - u,
                        requestTime: e.value - o,
                        navigationEntry: i
                    };
                } else
                    e.attribution = {
                        waitingTime: 0,
                        dnsTime: 0,
                        connectionTime: 0,
                        requestTime: 0
                    };
            })(a), n(a);
        }, t);
    };

function Tt(n) {
    return {
        evid: 180,
        src: 72,
        endpoint: "pulse",
        params: n
    };
}
const It = [
        // GUID
        [
            /\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}(\/|$)/g,
            "/:guid$1"
        ],
        // Hexa ID
        [/\/[0-9a-fA-F]{24,}(\/|$)/g, "/:id$1"],
        // Numeric ID
        [/\/[0-9]{12}(\/|$)/g, "/:id$1"],
        // Date
        [/\/[0-9]{4}-[0-9]{2}-[0-9]{2}(\/|$)/g, "/:date$1"],
        // Form submission
        [/\/comp-[a-zA-Z0-9]{8}(\/|$)/g, "/:id$1"],
        // Remove trailing slash
        [/\/$/, ""]
    ],
    St = (n) => {
        const t = new URL(n);
        return It.forEach(([a, e]) => {
            t.pathname = t.pathname.replace(a, e);
        }), t.search = "", t.toString();
    },
    _t = (n) => {
        var e;
        const {
            value: t,
            attribution: a
        } = n;
        return {
            clsVal: t.toString(),
            clsLargestShiftVal: (e = a.largestShiftValue) == null ? void 0 : e.toString(),
            clsLargestShiftTime: a.largestShiftTime ? Math.trunc(a.largestShiftTime) : void 0,
            clsRating: n.rating,
            metadata: {
                clsLargestShiftTarget: a.largestShiftTarget,
                clsLargestShiftSource: a.largestShiftSource ? JSON.stringify(a.largestShiftSource) : void 0
            }
        };
    },
    Et = (n, t) => {
        var r, s, u, o, d;
        const {
            value: a,
            attribution: e
        } = n;
        let i = {};
        if (t && ((r = e.eventEntry) != null && r.target))
            try {
                i = t(
                    (s = e.eventEntry) == null ? void 0 : s.target
                );
            } catch {}
        return {
            inpValue: Math.trunc(a),
            inpRating: n.rating,
            inpEventType: e.eventType,
            inpTargetSelector: e.eventTarget,
            inpStartTime: e.eventTime ? Math.trunc(e.eventTime) : void 0,
            inpProcessingStart: (u = e.eventEntry) != null && u.processingStart ? Math.trunc(e.eventEntry.processingStart) : void 0,
            inpProcessingEnd: (o = e.eventEntry) != null && o.processingEnd ? Math.trunc(e.eventEntry.processingEnd) : void 0,
            inpInteractionId: (d = e.eventEntry) == null ? void 0 : d.interactionId,
            inpLoadState: e.loadState,
            ...i.compType && {
                inpComponentType: i.compType
            },
            ...i.widgetId && {
                inpWidgetId: i.widgetId
            },
            ...i.applicationId && {
                inpApplicationId: i.applicationId
            },
            metadata: {}
        };
    },
    Lt = (n, t) => {
        var d, l, c, p, f, g, m, h;
        const {
            value: a,
            attribution: e
        } = n, {
            lcpEntry: i,
            url: r
        } = e;
        let s = {};
        if (t && (i != null && i.element))
            try {
                s = t(
                    i == null ? void 0 : i.element
                );
            } catch {}
        const u = /\.(jpe?g|png|gif|svg|webp)/i.exec(r || ""),
            o = ((d = u == null ? void 0 : u[1]) == null ? void 0 : d.toLowerCase().replace("jpeg", "jpg")) || "other";
        return {
            lcp: Math.trunc(a),
            lcpSize: i != null && i.size ? Math.trunc(i.size) : void 0,
            lcpTag: (l = i == null ? void 0 : i.element) == null ? void 0 : l.tagName,
            lcpRating: n.rating,
            ...r && {
                lcpContentType: o
            },
            lcpResourceLoadDelay: Math.trunc(e.resourceLoadDelay),
            lcpResourceLoadTime: Math.trunc(e.resourceLoadTime),
            lcpElementRenderDelay: Math.trunc(e.elementRenderDelay),
            ...r && {
                lcpUrl: r
            },
            lcpInitiatorType: (c = e.lcpResourceEntry) == null ? void 0 : c.initiatorType,
            ...s.compType && {
                lcpComponentType: s.compType
            },
            ...s.widgetId && {
                lcpWidgetId: s.widgetId
            },
            ...s.applicationId && {
                lcpApplicationId: s.applicationId
            },
            metadata: {
                lcpResourceRequestStart: (p = e.lcpResourceEntry) == null ? void 0 : p.requestStart,
                lcpResourceResponseStart: (f = e.lcpResourceEntry) == null ? void 0 : f.responseStart,
                lcpResourceTransferSize: (g = e.lcpResourceEntry) == null ? void 0 : g.transferSize,
                lcpResourceNetworkProtocol: (m = e.lcpResourceEntry) == null ? void 0 : m.nextHopProtocol,
                // @ts-expect-error - It's experimental so the type does not exist yet in TS https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/deliveryType
                lcpResourceDeliveryType: (h = e.lcpResourceEntry) == null ? void 0 : h.deliveryType
            }
        };
    },
    bt = (n) => {
        const {
            value: t
        } = n;
        return {
            ttfb: Math.trunc(t),
            metadata: {}
        };
    },
    Mt = (n) => {
        const {
            value: t
        } = n;
        return {
            fcp: Math.trunc(t),
            metadata: {}
        };
    },
    H = {
        INP: Et,
        CLS: _t,
        LCP: Lt,
        TTFB: bt,
        FCP: Mt
    };

function wt(n, t) {
    return H == null ? void 0 : H[n.name](n, t);
}
class Ct {
    constructor({
        url: t,
        platform: a,
        biLogger: e,
        pulseLogger: i,
        navigationId: r,
        navType: s,
        sessionId: u,
        vsi: o,
        msid: d,
        uuid: l,
        getHtmlElementMetadata: c
    }) {
        // Internal business logic
        v(this, "_map", /* @__PURE__ */ new Map());
        v(this, "_biLogger");
        v(this, "_pulseLogger");
        // Data added to the event
        v(this, "_navigationId");
        v(this, "_navType");
        v(this, "_url");
        v(this, "_platform");
        v(this, "_sessionId");
        v(this, "_vsi");
        v(this, "_msid");
        v(this, "_uuid");
        // Public properties
        v(this, "getHtmlElementMetadata", () => ({}));
        this._url = St(t), this._platform = a, this._biLogger = e, this._pulseLogger = i, this._navigationId = r, this._navType = s, this._sessionId = u, this._vsi = o, this._msid = d, this._uuid = l, this.getHtmlElementMetadata = c;
    }
    flushQueue() {
        if (this._map.size > 0) {
            try {
                let t = {};
                const a = {};
                for (const [p, f] of this._map.entries()) {
                    const {
                        metadata: g,
                        ...m
                    } = f;
                    Object.keys(g).length > 0 && (a[p] = g), t = {
                        ...t,
                        ...m
                    };
                }
                const e = performance.getEntriesByType("long-animation-frame");
                a.loafs = e;
                const i = JSON.stringify(a),
                    r = Tt({
                        platform: this._platform,
                        url: this._url,
                        navigationId: this._navigationId,
                        navType: this._navType,
                        ...t,
                        metadata: i,
                        sessionId: this._sessionId,
                        ...this._msid && {
                            msid: this._msid
                        },
                        ...this._vsi && {
                            vsi: this._vsi
                        },
                        ...this._uuid && {
                            uuid: this._uuid
                        }
                    }),
                    {
                        src: s,
                        evid: u,
                        params: o,
                        ...d
                    } = r,
                    l = {
                        src: s,
                        evid: u,
                        ...o
                    },
                    c = { ...d,
                        category: "essential"
                    };
                this._biLogger.log(l, c), this._pulseLogger.info("Flushing queue", r);
            } catch (t) {
                this._pulseLogger.error("Failed to flush queue", t);
            }
            this._map.clear();
        }
    }
    addToQueue(t) {
        this._pulseLogger.info(`Adding metric to queue: ${t.name}`, t), this._map.set(
            t.name,
            wt(t, this.getHtmlElementMetadata)
        );
    }
}

function Rt(n) {
    return {
        info: (t, ...a) => {
            n && console.info(`[Pulse] ${t}`, a);
        },
        warn: (t, ...a) => {
            n && console.warn(`[Pulse] ${t}`, a);
        },
        error: (t, ...a) => {
            n && console.error(`[Pulse] ${t}`, a);
        }
    };
}
class At {
    constructor(t) {
        v(this, "_platform");
        v(this, "_biLogger");
        v(this, "_reportSoftNavs", !1);
        v(this, "_debug", !1);
        v(this, "_queues", /* @__PURE__ */ new Map());
        v(this, "_url", window.location.href);
        v(this, "_pulseLogger");
        v(this, "_sessionId");
        v(this, "_vsi");
        v(this, "_msid");
        v(this, "_uuid");
        v(this, "_getHtmlElementMetadata", () => ({}));
        if (this._platform = t.platform, !t.biLoggerFactory && !t.biLogger)
            throw new Error("biLogger or biLoggerFactory must be provided");
        this._biLogger = t.biLoggerFactory ? t.biLoggerFactory({
            useBatch: !0
        }).logger() : t.biLogger, this._reportSoftNavs = t.reportSoftNavs || !1, this._debug = t.debug || !1, this._sessionId = t.sessionId, this._vsi = t.vsi, this._msid = t.msid, this._uuid = t.uuid, t.getHtmlElementMetadata && (this._getHtmlElementMetadata = t.getHtmlElementMetadata);
        const a = new URLSearchParams(window.location.search);
        this._pulseLogger = Rt(
            this._debug || a.has("debugPulse")
        ), this._initListeners();
    }
    update({
        getHtmlElementMetadata: t
    }) {
        this._getHtmlElementMetadata = t;
        for (const a of this._queues.values())
            a.getHtmlElementMetadata = this._getHtmlElementMetadata;
    }
    addMetricToQueue(t) {
        var i;
        const {
            navigationId: a,
            navigationType: e
        } = t;
        this._queues.has(a.toString()) || this._queues.set(
            a.toString(),
            new Ct({
                url: this._url,
                platform: this._platform,
                biLogger: this._biLogger,
                pulseLogger: this._pulseLogger,
                sessionId: this._sessionId,
                ...this._vsi && {
                    vsi: this._vsi
                },
                ...this._msid && {
                    msid: this._msid
                },
                ...this._uuid && {
                    uuid: this._uuid
                },
                getHtmlElementMetadata: this._getHtmlElementMetadata,
                navigationId: a.toString(),
                navType: e
            })
        ), (i = this._queues.get(a.toString())) == null || i.addToQueue(t);
    }
    _initListeners() {
        yt((t) => this.addMetricToQueue(t), {
            reportSoftNavs: this._reportSoftNavs
        }), dt((t) => this.addMetricToQueue(t), {
            reportSoftNavs: this._reportSoftNavs
        }), pt((t) => this.addMetricToQueue(t), {
            reportSoftNavs: this._reportSoftNavs
        }), ct((t) => this.addMetricToQueue(t), {
            reportSoftNavs: this._reportSoftNavs
        }), vt((t) => this.addMetricToQueue(t), {
            reportSoftNavs: this._reportSoftNavs,
            reportAllChanges: !0
        }), addEventListener("visibilitychange", () => {
            if (document.visibilityState === "hidden")
                for (const t of this._queues.values())
                    t.flushQueue();
        }), addEventListener("pagehide", () => {
            for (const t of this._queues.values())
                t.flushQueue();
        });
    }
}
export {
    At as Pulse
};